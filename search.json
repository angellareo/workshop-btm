[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "Requirements for the Workshop",
    "section": "",
    "text": "Requirements for the Workshop\nTo ensure a smooth and productive experience during the workshop, please prepare the following items in advance:\n\nComputer: Please bring a laptop (We recommend Linux, but can be done in Windows or Mac). Make sure your device has at least one USB port and administrative privileges to install software.\nArduino IDE: We will be using the Arduino 2 IDE. Please install it in advance by following these steps:\n\nGo to the official Arduino IDE 2 download page\nDownload the installer for your operating system.\nFollow the installation instructions specific to your platform\nMake sure the IDE launches correctly after installation. If you encounter any issues, consult the installation guide provided by Arduino.\n\nCode: Please download the workshop repository in advance in using one of the following formats: ZIP File or GitHub Link. Although the original BtM code can also be used.\n\nMake sure you get the contents (or extract them if you downloaded the ZIP) and browse the folder to verify that everything was downloaded correctly. Remember the path of this directory.\n\n\nIf you have any questions or need technical support before the workshop, feel free to contact us at: angel.lareo@uam.es / maria.leomontes@gmail.com",
    "crumbs": [
      "Requirements for the Workshop"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "1. Why a BtM?\n\nProblem to solve: Existing commercial solutions were expensive and did not fully meet our specific needs. They offered limited flexibility and closed architectures, which constrained our research applications.\nOur approach: Free/Libre and Open Source Development\nWe chose to develop our own solution using open hardware and open software.\nAdvantages include:\n\nLower cost\nTransparency and reproducibility\nFull adaptability to specific research needs\nCollaborative improvement and customization\n\n\n\n\n2. What is a BtM?\nThe BtM (Bryolichen Temperature Moisture board) is:\n\nA datalogger with:\n\nA temperature/humidity sensor for ambient conditions\n8 activity detection channels based on soil or organism water content\n\n\n\nHow do we measure “activity”?\n\nWater content–activity correlation: Biological activity is closely related to water content in soils and substrates.\nWater content = Conductance: By measuring electrical conductance, we estimate water content, which serves as a proxy for activity.\nBtM includes both software and hardware components, all completely open and free.\n\n\nHardware Demonstration\n\nWe will show the BtM device in both field and laboratory setups.\n(Include photo of the open BtM case)\n\n\n\nSoftware Demonstration\n\nWe will explore the code used to operate and analyze data with the BtM.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "sw.html",
    "href": "sw.html",
    "title": "Software",
    "section": "",
    "text": "BtM saves data in 11 columns in a .csv file\n\n\n\n\nBtM output in .csv format\n\n\n\nDate/Time\nTemperature (ºC)\nRelative Humidity (%)\n8 impedance columns with the value of each activity channel (ohm)\n\nlow values (&lt; 100) indicate the sample is moist, high values (&gt; 10,000) indicate the sample is wet (these values are resistance-dependent)\n\n\n\n\n\n\nTo program the BtM, we use an Arduino IDE\n\n\n\n\nScreenshot of BtM code",
    "crumbs": [
      "Software"
    ]
  },
  {
    "objectID": "sw.html#software-details",
    "href": "sw.html#software-details",
    "title": "Software",
    "section": "",
    "text": "BtM saves data in 11 columns in a .csv file\n\n\n\n\nBtM output in .csv format\n\n\n\nDate/Time\nTemperature (ºC)\nRelative Humidity (%)\n8 impedance columns with the value of each activity channel (ohm)\n\nlow values (&lt; 100) indicate the sample is moist, high values (&gt; 10,000) indicate the sample is wet (these values are resistance-dependent)\n\n\n\n\n\n\nTo program the BtM, we use an Arduino IDE\n\n\n\n\nScreenshot of BtM code",
    "crumbs": [
      "Software"
    ]
  },
  {
    "objectID": "hw.html",
    "href": "hw.html",
    "title": "Hardware",
    "section": "",
    "text": "The BtM PCB can be (depending on budget and skills):\n\nAssembled from scratch (DIY)\nProvided as a partially assembled board.\n\n\n![PCB schematic showing its different parts](img/assembly-schematic.png)\nHow conductance is measured:\n\nBased on Ohm’s Law:\nRelation between impedance (R) and conductance (C): ( G = )\n\n\n\n\n\n\nArduino Board (serves as microcontroller)\nTemperature/Humidity Sensor:\nTwo versions available; we will discuss the pros and cons of each, including a current issue with one of the sensor models.",
    "crumbs": [
      "Hardware"
    ]
  },
  {
    "objectID": "hw.html#hardware-details",
    "href": "hw.html#hardware-details",
    "title": "Hardware",
    "section": "",
    "text": "The BtM PCB can be (depending on budget and skills):\n\nAssembled from scratch (DIY)\nProvided as a partially assembled board.\n\n\n![PCB schematic showing its different parts](img/assembly-schematic.png)\nHow conductance is measured:\n\nBased on Ohm’s Law:\nRelation between impedance (R) and conductance (C): ( G = )\n\n\n\n\n\n\nArduino Board (serves as microcontroller)\nTemperature/Humidity Sensor:\nTwo versions available; we will discuss the pros and cons of each, including a current issue with one of the sensor models.",
    "crumbs": [
      "Hardware"
    ]
  }
]